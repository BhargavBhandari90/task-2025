{"version":3,"file":"advanced-slider-view.js","mappings":"AAAAA,SAASC,iBAAiB,mBAAoB,WAE5C,IAAMC,EAASF,SAASG,cAAc,WAChCC,EAAaJ,SAASG,cAAc,gBACpCE,EAASL,SAASM,iBAAiB,eACnCC,EAAUP,SAASG,cAAc,qBACjCK,EAAUR,SAASG,cAAc,qBAGvC,GAAKD,GAAWE,GAAgC,IAAlBC,EAAOI,QAAiBF,GAAYC,EAAlE,CAKA,IAAME,EAAcC,OAAOC,iBAAiBR,GACtCS,EAAWC,SAASJ,EAAYK,UAAW,KAAO,EACpDC,EAAkB,EAClBC,EAAgB,EAChBC,EAAa,EAcfC,IACAC,IAGAb,EAAQN,iBAAiB,QAW3B,WACMe,EAAkB,IACpBA,IACAI,IAEJ,GAfEZ,EAAQP,iBAAiB,QAkB3B,WACE,IAAMoB,EAAcC,KAAKC,KAAKlB,EAAOI,OAASQ,GAAiB,EAE3DD,EAAkBK,IACpBL,IACAI,IAEJ,GAtBET,OAAOV,iBAAiB,SAAU,WAChCkB,IACAC,GACF,EAhCF,CAUA,SAASD,IACP,IAAMK,EAActB,EAAOuB,wBAAwBC,MACnDR,EAAab,EAAO,GAAGoB,wBAAwBC,MAC/CT,EAAgBK,KAAKK,MAAMH,EAAcN,GAGzCD,EAAgBK,KAAKM,IAAI,EAAGX,EAC9B,CAqCA,SAASG,IAEP,IAAMS,EACJb,EAAkBC,GAAiBC,EAAaL,GAG5CiB,EAAY1B,EAAW2B,YAAc7B,EAAO8B,YAG5CC,GAAcX,KAAKY,IAAIL,EAAcC,GAE3C1B,EAAW+B,MAAMC,UAAY,cAAHC,OAAiBJ,EAAU,OACrD7B,EAAW+B,MAAMG,WAAa,qBAChC,CAIF","sources":["webpack://task-2025/./src/blocks/advanced-slider/view.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function () {\n  // Get slider elements\n  const slider = document.querySelector(\".slider\");\n  const sliderGrid = document.querySelector(\".slider-grid\");\n  const slides = document.querySelectorAll(\".slide-item\");\n  const prevBtn = document.querySelector(\".slider-nav .prev\");\n  const nextBtn = document.querySelector(\".slider-nav .next\");\n\n  // Check if we have all necessary elements\n  if (!slider || !sliderGrid || slides.length === 0 || !prevBtn || !nextBtn) {\n    return;\n  }\n\n  // Set initial variables\n  const slideStyles = window.getComputedStyle(sliderGrid);\n  const slideGap = parseInt(slideStyles.columnGap, 10) || 0;\n  let currentPosition = 0;\n  let slidesPerView = 3; // Default, will be recalculated.\n  let slideWidth = 0;\n\n  // Update slides per view for responsive design\n  function updateSlidesPerView() {\n    const sliderWidth = slider.getBoundingClientRect().width;\n    slideWidth = slides[0].getBoundingClientRect().width;\n    slidesPerView = Math.floor(sliderWidth / slideWidth);\n\n    // Ensure we have at least 1 slide per view\n    slidesPerView = Math.max(1, slidesPerView);\n  }\n\n  // Initialize the slider\n  function initSlider() {\n    updateSlidesPerView();\n    updateSliderPosition();\n\n    // Add event listeners to navigation buttons\n    prevBtn.addEventListener(\"click\", slidePrev);\n    nextBtn.addEventListener(\"click\", slideNext);\n\n    // Handle window resize\n    window.addEventListener(\"resize\", function () {\n      updateSlidesPerView();\n      updateSliderPosition();\n    });\n  }\n\n  // Slide to the previous set of slides\n  function slidePrev() {\n    if (currentPosition > 0) {\n      currentPosition--;\n      updateSliderPosition();\n    }\n  }\n\n  // Slide to the next set of slides\n  function slideNext() {\n    const maxPosition = Math.ceil(slides.length / slidesPerView) - 1;\n\n    if (currentPosition < maxPosition) {\n      currentPosition++;\n      updateSliderPosition();\n    }\n  }\n\n  // Update the slider position\n  function updateSliderPosition() {\n    // Calculate the target scroll position for the current \"page\"\n    const targetScroll =\n      currentPosition * slidesPerView * (slideWidth + slideGap);\n\n    // Calculate the maximum possible scroll distance\n    const maxScroll = sliderGrid.scrollWidth - slider.clientWidth;\n\n    // Use the smaller of the two values to avoid overscrolling past the last slide\n    const translateX = -Math.min(targetScroll, maxScroll);\n\n    sliderGrid.style.transform = `translateX(${translateX}px)`;\n    sliderGrid.style.transition = \"transform 0.3s ease\";\n  }\n\n  // Initialize the slider.\n  initSlider();\n});\n"],"names":["document","addEventListener","slider","querySelector","sliderGrid","slides","querySelectorAll","prevBtn","nextBtn","length","slideStyles","window","getComputedStyle","slideGap","parseInt","columnGap","currentPosition","slidesPerView","slideWidth","updateSlidesPerView","updateSliderPosition","maxPosition","Math","ceil","sliderWidth","getBoundingClientRect","width","floor","max","targetScroll","maxScroll","scrollWidth","clientWidth","translateX","min","style","transform","concat","transition"],"sourceRoot":""}