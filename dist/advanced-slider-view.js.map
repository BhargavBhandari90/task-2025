{"version":3,"file":"advanced-slider-view.js","mappings":"AAAAA,SAASC,iBAAkB,mBAAoB,WAE9C,IAAMC,EAASF,SAASG,cAAe,WACjCC,EAAaJ,SAASG,cAAe,gBACrCE,EAASL,SAASM,iBAAkB,eACpCC,EAAUP,SAASG,cAAe,qBAClCK,EAAUR,SAASG,cAAe,qBAClCM,EAAUT,SAASG,cAAe,+BAGxC,GACGD,GACAE,GACgB,IAAlBC,EAAOK,QACLH,GACAC,EALH,CAWA,IAAMG,EAAcC,OAAOC,iBAAkBT,GACvCU,EAAWC,SAAUJ,EAAYK,UAAW,KAAQ,EACtDC,EAAkB,EAClBC,EAAgB,EAChBC,EAAa,EACbC,EAAa,EAoBhBC,IACAC,IAGAf,EAAQN,iBAAkB,QAW3B,WACMgB,EAAkB,IACtBA,IACAK,IAEF,GAfCd,EAAQP,iBAAkB,QAkB3B,WAGMgB,EAFeG,EAAa,IAGhCH,IACAK,IAEF,GAtBCV,OAAOX,iBAAkB,SAAU,WAClCoB,IACAC,GACD,EAvCD,CAYA,SAASD,IACR,IAAME,EAAcrB,EAAOsB,wBAAwBC,MACnDN,EAAad,EAAQ,GAAImB,wBAAwBC,MACjDP,EAAgBQ,KAAKC,MAAOJ,EAAcJ,GAC1C,IAAIS,EACHvB,EAAOK,OAASmB,GACbxB,EAAOK,OATO,EAUdL,EAAOK,OAGXQ,EAAgBQ,KAAKI,IAAK,EAAGZ,GAC7BE,EAAaM,KAAKK,KAAMH,EAAYV,EACrC,CAqCA,SAASI,IAER,IAAMU,EACLf,EAAkBC,GAAkBC,EAAaL,GAG5CmB,EAAY7B,EAAW8B,YAAchC,EAAOiC,YAG5CC,GAAcV,KAAKW,IAAKL,EAAcC,GAE5C7B,EAAWkC,MAAMC,UAAY,cAAHC,OAAkBJ,EAAU,OACtDhC,EAAWkC,MAAMG,WAAa,sBAEzBhC,IACJA,EAAQiC,YAAc,GAAHF,OAAOvB,EAAkB,EAAC,OAAAuB,OAAQpB,GAEvD,CAID","sources":["webpack://task-2025/./src/blocks/advanced-slider/view.js"],"sourcesContent":["document.addEventListener( 'DOMContentLoaded', function () {\n\t// Get slider elements\n\tconst slider = document.querySelector( '.slider' );\n\tconst sliderGrid = document.querySelector( '.slider-grid' );\n\tconst slides = document.querySelectorAll( '.slide-item' );\n\tconst prevBtn = document.querySelector( '.slider-nav .prev' );\n\tconst nextBtn = document.querySelector( '.slider-nav .next' );\n\tconst counter = document.querySelector( '.slider-nav .slider-counter' );\n\n\t// Check if we have all necessary elements\n\tif (\n\t\t! slider ||\n\t\t! sliderGrid ||\n\t\tslides.length === 0 ||\n\t\t! prevBtn || // if no prevBtn, no nav is present\n\t\t! nextBtn // if no nextBtn, no nav is present\n\t) {\n\t\treturn;\n\t}\n\n\t// Set initial variables\n\tconst slideStyles = window.getComputedStyle( sliderGrid );\n\tconst slideGap = parseInt( slideStyles.columnGap, 10 ) || 0;\n\tlet currentPosition = 0;\n\tlet slidesPerView = 3; // Default, will be recalculated.\n\tlet slideWidth = 0;\n\tlet totalPages = 0;\n\tlet slidesPerRow = 5;\n\n\t// Update slides per view for responsive design\n\tfunction updateSlidesPerView() {\n\t\tconst sliderWidth = slider.getBoundingClientRect().width;\n\t\tslideWidth = slides[ 0 ].getBoundingClientRect().width;\n\t\tslidesPerView = Math.floor( sliderWidth / slideWidth );\n\t\tlet newSlides =\n\t\t\tslides.length > slidesPerRow * 2\n\t\t\t\t? slides.length - slidesPerRow\n\t\t\t\t: slides.length;\n\n\t\t// Ensure we have at least 1 slide per view\n\t\tslidesPerView = Math.max( 1, slidesPerView );\n\t\ttotalPages = Math.ceil( newSlides / slidesPerView );\n\t}\n\n\t// Initialize the slider\n\tfunction initSlider() {\n\t\tupdateSlidesPerView();\n\t\tupdateSliderPosition();\n\n\t\t// Add event listeners to navigation buttons\n\t\tprevBtn.addEventListener( 'click', slidePrev );\n\t\tnextBtn.addEventListener( 'click', slideNext );\n\n\t\t// Handle window resize\n\t\twindow.addEventListener( 'resize', function () {\n\t\t\tupdateSlidesPerView();\n\t\t\tupdateSliderPosition();\n\t\t} );\n\t}\n\n\t// Slide to the previous set of slides\n\tfunction slidePrev() {\n\t\tif ( currentPosition > 0 ) {\n\t\t\tcurrentPosition--;\n\t\t\tupdateSliderPosition();\n\t\t}\n\t}\n\n\t// Slide to the next set of slides\n\tfunction slideNext() {\n\t\tconst maxPosition = totalPages - 1;\n\n\t\tif ( currentPosition < maxPosition ) {\n\t\t\tcurrentPosition++;\n\t\t\tupdateSliderPosition();\n\t\t}\n\t}\n\n\t// Update the slider position\n\tfunction updateSliderPosition() {\n\t\t// Calculate the target scroll position for the current \"page\"\n\t\tconst targetScroll =\n\t\t\tcurrentPosition * slidesPerView * ( slideWidth + slideGap );\n\n\t\t// Calculate the maximum possible scroll distance\n\t\tconst maxScroll = sliderGrid.scrollWidth - slider.clientWidth;\n\n\t\t// Use the smaller of the two values to avoid overscrolling past the last slide\n\t\tconst translateX = -Math.min( targetScroll, maxScroll );\n\n\t\tsliderGrid.style.transform = `translateX(${ translateX }px)`;\n\t\tsliderGrid.style.transition = 'transform 0.3s ease';\n\n\t\tif ( counter ) {\n\t\t\tcounter.textContent = `${ currentPosition + 1 } / ${ totalPages }`;\n\t\t}\n\t}\n\n\t// Initialize the slider.\n\tinitSlider();\n} );\n"],"names":["document","addEventListener","slider","querySelector","sliderGrid","slides","querySelectorAll","prevBtn","nextBtn","counter","length","slideStyles","window","getComputedStyle","slideGap","parseInt","columnGap","currentPosition","slidesPerView","slideWidth","totalPages","updateSlidesPerView","updateSliderPosition","sliderWidth","getBoundingClientRect","width","Math","floor","newSlides","slidesPerRow","max","ceil","targetScroll","maxScroll","scrollWidth","clientWidth","translateX","min","style","transform","concat","transition","textContent"],"sourceRoot":""}