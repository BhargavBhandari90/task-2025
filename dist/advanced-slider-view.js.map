{"version":3,"file":"advanced-slider-view.js","mappings":"AAAAA,SAASC,iBAAkB,mBAAoB,WAE9C,IAAMC,EAASF,SAASG,cAAe,WACjCC,EAAaJ,SAASG,cAAe,gBACrCE,EAASL,SAASM,iBAAkB,eACpCC,EAAUP,SAASG,cAAe,qBAClCK,EAAUR,SAASG,cAAe,qBAClCM,EAAUT,SAASG,cAAe,+BAGxC,GACGD,GACAE,GACgB,IAAlBC,EAAOK,QACLH,GACAC,EALH,CAWA,IAAMG,EAAcC,OAAOC,iBAAkBT,GACvCU,EAAWC,SAAUJ,EAAYK,UAAW,KAAQ,EACtDC,EAAkB,EAClBC,EAAgB,EAChBC,EAAa,EACbC,EAAa,EA0BhBC,IACAC,IAGAf,EAAQN,iBAAkB,QAASsB,GACnCf,EAAQP,iBAAkB,QAASuB,GAGnCZ,OAAOX,iBAAkB,SAAU,WAClCoB,IACAC,GACD,GAGAtB,SAASC,iBAAkB,UAG5B,SAAwBwB,GAEvB,IAAKA,EAAEC,OAAOC,QAAS,2BAAvB,CAKA,IAAMC,EAAa1B,EAAO2B,wBAEzBD,EAAWE,IAAMlB,OAAOmB,aAAeH,EAAWI,OAAS,IAM7C,cAAVP,EAAEQ,MACNR,EAAES,iBACFX,KAEc,eAAVE,EAAEQ,MACNR,EAAES,iBACFV,KAjBD,CAmBD,EA1EA,CAYA,SAASH,IACR,IAAMc,EAAcjC,EAAO2B,wBAAwBO,MACnDjB,EAAad,EAAQ,GAAIwB,wBAAwBO,MACjDlB,EAAgBmB,KAAKC,MAAOH,EAAchB,GAC1C,IAAIoB,EAAY,EAEXlC,EAAOK,OATM,IAUjB6B,EACClC,EAAOK,OAAS8B,GAXA,EAabnC,EAAOK,OAbM,GAgBlB+B,QAAQC,IAAK,YAAaH,GAG1BrB,EAAgBmB,KAAKM,IAAK,EAAGzB,GAC7BE,EAAaiB,KAAKO,KAAML,EAAYrB,EACrC,CA+CA,SAASK,IACHN,EAAkB,IACtBA,IACAK,IAEF,CAGA,SAASE,IAGHP,EAFeG,EAAa,IAGhCH,IACAK,IAEF,CAGA,SAASA,IAER,IAAMuB,EACL5B,EAAkBC,GAAkBC,EAAaL,GAG5CgC,EAAY1C,EAAW2C,YAAc7C,EAAO8C,YAG5CC,GAAcZ,KAAKa,IAAKL,EAAcC,GAE5C1C,EAAW+C,MAAMC,UAAY,cAAHC,OAAkBJ,EAAU,OACtD7C,EAAW+C,MAAMG,WAAa,sBAEzB7C,IACJA,EAAQ8C,YAAc,GAAHF,OAAOpC,EAAkB,EAAC,OAAAoC,OAAQjC,IAItDb,EAAQiD,SAA+B,IAApBvC,EACnBT,EAAQgD,SAAWvC,GAAmBG,EAAa,CACpD,CAID","sources":["webpack://task-2025/./src/blocks/advanced-slider/view.js"],"sourcesContent":["document.addEventListener( 'DOMContentLoaded', function () {\n\t// Get slider elements\n\tconst slider = document.querySelector( '.slider' );\n\tconst sliderGrid = document.querySelector( '.slider-grid' );\n\tconst slides = document.querySelectorAll( '.slide-item' );\n\tconst prevBtn = document.querySelector( '.slider-nav .prev' );\n\tconst nextBtn = document.querySelector( '.slider-nav .next' );\n\tconst counter = document.querySelector( '.slider-nav .slider-counter' );\n\n\t// Check if we have all necessary elements\n\tif (\n\t\t! slider ||\n\t\t! sliderGrid ||\n\t\tslides.length === 0 ||\n\t\t! prevBtn || // if no prevBtn, no nav is present\n\t\t! nextBtn // if no nextBtn, no nav is present\n\t) {\n\t\treturn;\n\t}\n\n\t// Set initial variables\n\tconst slideStyles = window.getComputedStyle( sliderGrid );\n\tconst slideGap = parseInt( slideStyles.columnGap, 10 ) || 0;\n\tlet currentPosition = 0;\n\tlet slidesPerView = 3; // Default, will be recalculated.\n\tlet slideWidth = 0;\n\tlet totalPages = 0;\n\tlet slidesPerRow = 5;\n\n\t// Update slides per view for responsive design\n\tfunction updateSlidesPerView() {\n\t\tconst sliderWidth = slider.getBoundingClientRect().width;\n\t\tslideWidth = slides[ 0 ].getBoundingClientRect().width;\n\t\tslidesPerView = Math.floor( sliderWidth / slideWidth );\n\t\tlet newSlides = 0;\n\n\t\tif ( slides.length > slidesPerRow ) {\n\t\t\tnewSlides =\n\t\t\t\tslides.length < slidesPerRow * 2\n\t\t\t\t\t? slidesPerRow\n\t\t\t\t\t: slides.length - slidesPerRow;\n\t\t}\n\n\t\tconsole.log( 'newSlides', newSlides );\n\n\t\t// Ensure we have at least 1 slide per view\n\t\tslidesPerView = Math.max( 1, slidesPerView );\n\t\ttotalPages = Math.ceil( newSlides / slidesPerView );\n\t}\n\n\t// Initialize the slider\n\tfunction initSlider() {\n\t\tupdateSlidesPerView();\n\t\tupdateSliderPosition();\n\n\t\t// Add event listeners to navigation buttons\n\t\tprevBtn.addEventListener( 'click', slidePrev );\n\t\tnextBtn.addEventListener( 'click', slideNext );\n\n\t\t// Handle window resize\n\t\twindow.addEventListener( 'resize', function () {\n\t\t\tupdateSlidesPerView();\n\t\t\tupdateSliderPosition();\n\t\t} );\n\n\t\t// Handle keyboard navigation\n\t\tdocument.addEventListener( 'keydown', handleKeydown );\n\t}\n\n\tfunction handleKeydown( e ) {\n\t\t// Do not interfere with text input fields.\n\t\tif ( e.target.matches( 'input, textarea, select' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the slider is in the viewport before acting on keydown.\n\t\tconst sliderRect = slider.getBoundingClientRect();\n\t\tconst isSliderInView =\n\t\t\tsliderRect.top < window.innerHeight && sliderRect.bottom > 0;\n\n\t\tif ( ! isSliderInView ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( e.key === 'ArrowLeft' ) {\n\t\t\te.preventDefault();\n\t\t\tslidePrev();\n\t\t}\n\t\tif ( e.key === 'ArrowRight' ) {\n\t\t\te.preventDefault();\n\t\t\tslideNext();\n\t\t}\n\t}\n\n\t// Slide to the previous set of slides\n\tfunction slidePrev() {\n\t\tif ( currentPosition > 0 ) {\n\t\t\tcurrentPosition--;\n\t\t\tupdateSliderPosition();\n\t\t}\n\t}\n\n\t// Slide to the next set of slides\n\tfunction slideNext() {\n\t\tconst maxPosition = totalPages - 1;\n\n\t\tif ( currentPosition < maxPosition ) {\n\t\t\tcurrentPosition++;\n\t\t\tupdateSliderPosition();\n\t\t}\n\t}\n\n\t// Update the slider position\n\tfunction updateSliderPosition() {\n\t\t// Calculate the target scroll position for the current \"page\"\n\t\tconst targetScroll =\n\t\t\tcurrentPosition * slidesPerView * ( slideWidth + slideGap );\n\n\t\t// Calculate the maximum possible scroll distance\n\t\tconst maxScroll = sliderGrid.scrollWidth - slider.clientWidth;\n\n\t\t// Use the smaller of the two values to avoid overscrolling past the last slide\n\t\tconst translateX = -Math.min( targetScroll, maxScroll );\n\n\t\tsliderGrid.style.transform = `translateX(${ translateX }px)`;\n\t\tsliderGrid.style.transition = 'transform 0.3s ease';\n\n\t\tif ( counter ) {\n\t\t\tcounter.textContent = `${ currentPosition + 1 } / ${ totalPages }`;\n\t\t}\n\n\t\t// Disable/enable buttons based on position.\n\t\tprevBtn.disabled = currentPosition === 0;\n\t\tnextBtn.disabled = currentPosition >= totalPages - 1;\n\t}\n\n\t// Initialize the slider.\n\tinitSlider();\n} );\n"],"names":["document","addEventListener","slider","querySelector","sliderGrid","slides","querySelectorAll","prevBtn","nextBtn","counter","length","slideStyles","window","getComputedStyle","slideGap","parseInt","columnGap","currentPosition","slidesPerView","slideWidth","totalPages","updateSlidesPerView","updateSliderPosition","slidePrev","slideNext","e","target","matches","sliderRect","getBoundingClientRect","top","innerHeight","bottom","key","preventDefault","sliderWidth","width","Math","floor","newSlides","slidesPerRow","console","log","max","ceil","targetScroll","maxScroll","scrollWidth","clientWidth","translateX","min","style","transform","concat","transition","textContent","disabled"],"sourceRoot":""}